"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deactivate = exports.activate = void 0;
const vscode = require("vscode");
const express = require("express");
const fs = require("fs");
const path = require("path");
let server = null;
let outputChannel;
let hookEnabled = false;
let originalEnvValue;
let capturedRequests = new Set(); // –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
function activate(context) {
    console.log('Roo Hook Transit Extension v1 is now active!');
    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –≤—ã–≤–æ–¥–∞ –¥–ª—è –ª–æ–≥–æ–≤
    outputChannel = vscode.window.createOutputChannel('Roo Hook Transit Extension');
    outputChannel.show();
    outputChannel.appendLine('üöÄ Roo Hook Transit Extension v1 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
    outputChannel.appendLine(`üìç –í—Ä–µ–º—è: ${new Date().toISOString()}`);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    originalEnvValue = process.env.ROO_HOOK_URL;
    // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–∫–æ–≤
    const app = express();
    app.use(express.json({ limit: '50mb' }));
    // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö—É–∫–∞ - —Å—Ç–∞—Ä—ã–π API (–≤–µ—Ä—Å–∏–∏ 3.22.0)
    app.post('/', (req, res) => {
        outputChannel.appendLine('\n=== üì• –ü–ï–†–ï–•–í–ê–ß–ï–ù –ó–ê–ü–†–û–° –ö AI ===');
        outputChannel.appendLine(`–í—Ä–µ–º—è: ${new Date().toISOString()}`);
        outputChannel.appendLine(`Request type: ${req.body.type}`);
        if (req.body.type === 'api_request' && req.body.data) {
            // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï MOCK –§–ê–ô–õ–ê
            const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
            const mockFilePath = path.join(workspaceRoot, 'mock-request.json');
            if (fs.existsSync(mockFilePath)) {
                outputChannel.appendLine('\nüé≠ –ù–ê–ô–î–ï–ù MOCK –§–ê–ô–õ - –ò–°–ü–û–õ–¨–ó–£–ï–ú MOCK!');
                try {
                    const mockData = JSON.parse(fs.readFileSync(mockFilePath, 'utf8'));
                    outputChannel.appendLine(`üìÑ Mock —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${mockData.data.systemPrompt.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                    outputChannel.appendLine(`üìÑ Mock —Å–æ–æ–±—â–µ–Ω–∏—è: ${mockData.data.messages.length} —à—Ç.`);
                    outputChannel.appendLine(`üìÑ Mock –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(mockData.data.metadata)}`);
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º MOCK –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö
                    res.json({
                        modifiedSystemPrompt: mockData.data.systemPrompt,
                        modifiedMessages: mockData.data.messages,
                        modifiedMetadata: {
                            ...mockData.data.metadata,
                            hookIntercepted: true,
                            hookVersion: 'transit-mock-v1.3',
                            mode: 'MOCK_OVERRIDE',
                            mockFile: 'mock-request.json'
                        }
                    });
                    vscode.window.showInformationMessage('üé≠ MOCK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω!');
                    return;
                }
                catch (error) {
                    outputChannel.appendLine(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è mock —Ñ–∞–π–ª–∞: ${error.message}`);
                    vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞ mock —Ñ–∞–π–ª–∞: ${error.message}`);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                }
            }
            // üì° –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú - –µ—Å–ª–∏ –Ω–µ—Ç mock —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
            const data = req.body.data;
            const lastMessage = data.messages?.[data.messages.length - 1];
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º content - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤
            let contentText = '';
            if (lastMessage) {
                if (typeof lastMessage.content === 'string') {
                    contentText = lastMessage.content;
                }
                else if (Array.isArray(lastMessage.content)) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏
                    contentText = lastMessage.content
                        .filter((item) => item.type === 'text')
                        .map((item) => item.text)
                        .join(' ');
                }
                else {
                    contentText = JSON.stringify(lastMessage.content);
                }
                outputChannel.appendLine(`\nüìù –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:`);
                outputChannel.appendLine(`"${contentText}"`);
            }
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ  
            vscode.window.showInformationMessage(`üéØ –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: "${contentText.substring(0, 50)}..."`);
            // üíæ –¢–†–ê–ù–ó–ò–¢–ù–´–ô –†–ï–ñ–ò–ú - –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
            const originalSystemPrompt = data.systemPrompt || '';
            // üîí –û–î–ù–û–ö–†–ê–¢–ù–ê–Ø –ó–ê–ü–ò–°–¨ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏
            const requestHash = contentText + '|' + originalSystemPrompt.length;
            if (capturedRequests.has(requestHash)) {
                outputChannel.appendLine('‚ö†Ô∏è –î–£–ë–õ–ò–ö–ê–¢ –ó–ê–ü–†–û–°–ê - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                res.json({
                    modifiedSystemPrompt: originalSystemPrompt,
                    modifiedMessages: data.messages,
                    modifiedMetadata: {
                        ...data.metadata,
                        hookIntercepted: true,
                        hookVersion: 'transit-passthrough-v1.1',
                        mode: 'PASSTHROUGH_DUPLICATE_SKIPPED'
                    }
                });
                return;
            }
            // üìù –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–´–ï –î–ê–ù–ù–´–ï
            if (!originalSystemPrompt || originalSystemPrompt.length < 100) {
                outputChannel.appendLine('‚ö†Ô∏è –ü–£–°–¢–û–ô –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
                res.json({ passthrough: true });
                return;
            }
            if (!contentText || contentText.length < 5) {
                outputChannel.appendLine('‚ö†Ô∏è –ü–£–°–¢–û–ô –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
                res.json({ passthrough: true });
                return;
            }
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
                capturedRequests.add(requestHash);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∫–æ—Ä–µ–Ω—å –≤–æ—Ä–∫—Å–ø–µ–π—Å–∞
                const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                // –§–∞–π–ª –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                const systemPromptFile = path.join(workspaceRoot, `captured-system-prompt-${timestamp}.txt`);
                fs.writeFileSync(systemPromptFile, originalSystemPrompt, 'utf8');
                // –§–∞–π–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
                const userRequestFile = path.join(workspaceRoot, `captured-user-request-${timestamp}.txt`);
                fs.writeFileSync(userRequestFile, contentText, 'utf8');
                // –§–∞–π–ª –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (JSON) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                if (data.messages && data.messages.length > 0) {
                    const allMessagesFile = path.join(workspaceRoot, `captured-all-messages-${timestamp}.json`);
                    fs.writeFileSync(allMessagesFile, JSON.stringify(data.messages, null, 2), 'utf8');
                }
                // –§–∞–π–ª –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                if (data.metadata && Object.keys(data.metadata).length > 0) {
                    const metadataFile = path.join(workspaceRoot, `captured-metadata-${timestamp}.json`);
                    fs.writeFileSync(metadataFile, JSON.stringify(data.metadata, null, 2), 'utf8');
                }
                outputChannel.appendLine('\nüíæ –§–ê–ô–õ–´ –°–û–•–†–ê–ù–ï–ù–´ (–û–î–ù–û–ö–†–ê–¢–ù–û):');
                outputChannel.appendLine(`- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: captured-system-prompt-${timestamp}.txt`);
                outputChannel.appendLine(`- –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: captured-user-request-${timestamp}.txt`);
                outputChannel.appendLine(`- –•—ç—à –∑–∞–ø—Ä–æ—Å–∞: ${requestHash.substring(0, 20)}...`);
                vscode.window.showInformationMessage(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –û–î–ù–û–ö–†–ê–¢–ù–û: ${timestamp}`);
                // –û—á–∏—â–∞–µ–º –∫—ç—à —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
                if (capturedRequests.size > 10) {
                    const oldEntries = Array.from(capturedRequests).slice(0, capturedRequests.size - 10);
                    oldEntries.forEach(entry => capturedRequests.delete(entry));
                }
            }
            catch (error) {
                outputChannel.appendLine(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
            }
            outputChannel.appendLine('\nüöÄ –¢–†–ê–ù–ó–ò–¢–ù–´–ô –†–ï–ñ–ò–ú - –ü–ï–†–ï–î–ê–ï–ú –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô');
            outputChannel.appendLine(`–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${originalSystemPrompt.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            outputChannel.appendLine(`–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.messages?.length || 0} —à—Ç.`);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º)
            res.json({
                modifiedSystemPrompt: originalSystemPrompt,
                modifiedMessages: data.messages,
                modifiedMetadata: {
                    ...data.metadata,
                    hookIntercepted: true,
                    hookVersion: 'transit-passthrough-v1',
                    interceptTime: new Date().toISOString(),
                    mode: 'PASSTHROUGH_WITH_CAPTURE'
                }
            });
        }
        else {
            outputChannel.appendLine('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞');
            res.json({ passthrough: true });
        }
    });
    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö—É–∫–∞ –¥–ª—è –≤–µ—Ä—Å–∏–π 3.22.5+ (–Ω–æ–≤—ã–π API endpoint)
    app.post('/api/hook', (req, res) => {
        outputChannel.appendLine('\n=== üì• –ü–ï–†–ï–•–í–ê–ß–ï–ù –ó–ê–ü–†–û–° –ö AI (NEW API) ===');
        outputChannel.appendLine(`–í—Ä–µ–º—è: ${new Date().toISOString()}`);
        outputChannel.appendLine(`–ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–ø—Ä—è–º–æ–π):`);
        // –í –Ω–æ–≤–æ–º API –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ {type: 'api_request', data: ...}
        const data = req.body;
        if (data && data.systemPrompt) {
            // üéØ –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï MOCK –§–ê–ô–õ–ê
            const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
            const mockFilePath = path.join(workspaceRoot, 'mock-request.json');
            if (fs.existsSync(mockFilePath)) {
                outputChannel.appendLine('\nüé≠ –ù–ê–ô–î–ï–ù MOCK –§–ê–ô–õ - –ò–°–ü–û–õ–¨–ó–£–ï–ú MOCK!');
                try {
                    const mockData = JSON.parse(fs.readFileSync(mockFilePath, 'utf8'));
                    outputChannel.appendLine(`üìÑ Mock —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${mockData.data.systemPrompt.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                    outputChannel.appendLine(`üìÑ Mock —Å–æ–æ–±—â–µ–Ω–∏—è: ${mockData.data.messages.length} —à—Ç.`);
                    outputChannel.appendLine(`üìÑ Mock –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(mockData.data.metadata)}`);
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º MOCK –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏)
                    res.json({
                        modifiedSystemPrompt: mockData.data.systemPrompt,
                        modifiedMessages: mockData.data.messages,
                        modifiedMetadata: {
                            ...mockData.data.metadata,
                            hookIntercepted: true,
                            hookVersion: 'transit-mock-v1.4-new-api',
                            mode: 'MOCK_OVERRIDE',
                            mockFile: 'mock-request.json'
                        }
                    });
                    vscode.window.showInformationMessage('üé≠ MOCK —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω!');
                    return;
                }
                catch (error) {
                    outputChannel.appendLine(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è mock —Ñ–∞–π–ª–∞: ${error.message}`);
                    vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞ mock —Ñ–∞–π–ª–∞: ${error.message}`);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                }
            }
            // üì° –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú - –µ—Å–ª–∏ –Ω–µ—Ç mock —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
            const lastMessage = data.messages?.[data.messages.length - 1];
            // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º content - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤
            let contentText = '';
            if (lastMessage) {
                if (typeof lastMessage.content === 'string') {
                    contentText = lastMessage.content;
                }
                else if (Array.isArray(lastMessage.content)) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏
                    contentText = lastMessage.content
                        .filter((item) => item.type === 'text')
                        .map((item) => item.text)
                        .join(' ');
                }
                else {
                    contentText = JSON.stringify(lastMessage.content);
                }
                outputChannel.appendLine(`\nüìù –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:`);
                outputChannel.appendLine(`"${contentText}"`);
            }
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ  
            vscode.window.showInformationMessage(`üéØ –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ (NEW API): "${contentText.substring(0, 50)}..."`);
            // üíæ –¢–†–ê–ù–ó–ò–¢–ù–´–ô –†–ï–ñ–ò–ú - –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
            const originalSystemPrompt = data.systemPrompt || '';
            // üîí –û–î–ù–û–ö–†–ê–¢–ù–ê–Ø –ó–ê–ü–ò–°–¨ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏
            const requestHash = contentText + '|' + originalSystemPrompt.length;
            if (capturedRequests.has(requestHash)) {
                outputChannel.appendLine('‚ö†Ô∏è –î–£–ë–õ–ò–ö–ê–¢ –ó–ê–ü–†–û–°–ê - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                res.json({
                    modifiedSystemPrompt: originalSystemPrompt,
                    modifiedMessages: data.messages,
                    modifiedMetadata: {
                        ...data.metadata,
                        hookIntercepted: true,
                        hookVersion: 'transit-passthrough-v1.4-new-api',
                        mode: 'PASSTHROUGH_DUPLICATE_SKIPPED'
                    }
                });
                return;
            }
            // üìù –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–£–°–¢–´–ï –î–ê–ù–ù–´–ï
            if (!originalSystemPrompt || originalSystemPrompt.length < 100) {
                outputChannel.appendLine('‚ö†Ô∏è –ü–£–°–¢–û–ô –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
                res.json({ passthrough: true });
                return;
            }
            if (!contentText || contentText.length < 5) {
                outputChannel.appendLine('‚ö†Ô∏è –ü–£–°–¢–û–ô –ó–ê–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
                res.json({ passthrough: true });
                return;
            }
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
                capturedRequests.add(requestHash);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∫–æ—Ä–µ–Ω—å –≤–æ—Ä–∫—Å–ø–µ–π—Å–∞
                const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath || '';
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                // –§–∞–π–ª –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                const systemPromptFile = path.join(workspaceRoot, `captured-system-prompt-${timestamp}.txt`);
                fs.writeFileSync(systemPromptFile, originalSystemPrompt, 'utf8');
                // –§–∞–π–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
                const userRequestFile = path.join(workspaceRoot, `captured-user-request-${timestamp}.txt`);
                fs.writeFileSync(userRequestFile, contentText, 'utf8');
                // –§–∞–π–ª –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (JSON) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                if (data.messages && data.messages.length > 0) {
                    const allMessagesFile = path.join(workspaceRoot, `captured-all-messages-${timestamp}.json`);
                    fs.writeFileSync(allMessagesFile, JSON.stringify(data.messages, null, 2), 'utf8');
                }
                // –§–∞–π–ª –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                if (data.metadata && Object.keys(data.metadata).length > 0) {
                    const metadataFile = path.join(workspaceRoot, `captured-metadata-${timestamp}.json`);
                    fs.writeFileSync(metadataFile, JSON.stringify(data.metadata, null, 2), 'utf8');
                }
                outputChannel.appendLine('\nüíæ –§–ê–ô–õ–´ –°–û–•–†–ê–ù–ï–ù–´ (–û–î–ù–û–ö–†–ê–¢–ù–û):');
                outputChannel.appendLine(`- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: captured-system-prompt-${timestamp}.txt`);
                outputChannel.appendLine(`- –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: captured-user-request-${timestamp}.txt`);
                outputChannel.appendLine(`- –•—ç—à –∑–∞–ø—Ä–æ—Å–∞: ${requestHash.substring(0, 20)}...`);
                vscode.window.showInformationMessage(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –û–î–ù–û–ö–†–ê–¢–ù–û: ${timestamp}`);
                // –û—á–∏—â–∞–µ–º –∫—ç—à —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
                if (capturedRequests.size > 10) {
                    const oldEntries = Array.from(capturedRequests).slice(0, capturedRequests.size - 10);
                    oldEntries.forEach(entry => capturedRequests.delete(entry));
                }
            }
            catch (error) {
                outputChannel.appendLine(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
            }
            outputChannel.appendLine('\nüöÄ –¢–†–ê–ù–ó–ò–¢–ù–´–ô –†–ï–ñ–ò–ú - –ü–ï–†–ï–î–ê–ï–ú –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô');
            outputChannel.appendLine(`–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${originalSystemPrompt.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            outputChannel.appendLine(`–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.messages?.length || 0} —à—Ç.`);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ç—Ä–∞–Ω–∑–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º)
            res.json({
                modifiedSystemPrompt: originalSystemPrompt,
                modifiedMessages: data.messages,
                modifiedMetadata: {
                    ...data.metadata,
                    hookIntercepted: true,
                    hookVersion: 'transit-passthrough-v1.4-new-api',
                    interceptTime: new Date().toISOString(),
                    mode: 'PASSTHROUGH_WITH_CAPTURE'
                }
            });
        }
        else {
            outputChannel.appendLine('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ (–Ω–æ–≤—ã–π API)');
            res.json({ passthrough: true });
        }
    });
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    const startServer = () => {
        try {
            server = app.listen(3000, () => {
                outputChannel.appendLine('üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
                outputChannel.appendLine('üì° –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Ö—É–∫–æ–≤ –æ—Ç Roo Code');
            });
            server.on('error', (error) => {
                outputChannel.appendLine(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
                vscode.window.showErrorMessage(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
            });
        }
        catch (error) {
            outputChannel.appendLine(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: ${error.message}`);
            vscode.window.showErrorMessage(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: ${error.message}`);
        }
    };
    // –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ö—É–∫–∞
    const activateHook = () => {
        if (!hookEnabled) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è WSL –æ–∫—Ä—É–∂–µ–Ω–∏—è
            // –í WSL Windows —Ö–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ IP —à–ª—é–∑–∞
            const hookUrl = process.platform === 'win32' ? 'http://localhost:3000' : 'http://172.21.240.1:3000';
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ VS Code
            process.env.ROO_HOOK_URL = hookUrl;
            // –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ vscode.env (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            try {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                vscode.commands.executeCommand('setContext', 'roo.hookUrl', hookUrl);
            }
            catch (e) {
                outputChannel.appendLine(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${e}`);
            }
            hookEnabled = true;
            outputChannel.appendLine('\nüî• –•–£–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!');
            outputChannel.appendLine(`Platform: ${process.platform}`);
            outputChannel.appendLine(`ROO_HOOK_URL = ${process.env.ROO_HOOK_URL}`);
            vscode.window.showInformationMessage('üî• Hook –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ AI –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã.', 'OK');
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if (!server) {
                startServer();
            }
        }
    };
    // –§—É–Ω–∫—Ü–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ö—É–∫–∞
    const deactivateHook = () => {
        if (hookEnabled) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (originalEnvValue) {
                process.env.ROO_HOOK_URL = originalEnvValue;
            }
            else {
                delete process.env.ROO_HOOK_URL;
            }
            hookEnabled = false;
            outputChannel.appendLine('\nüõë –•–£–ö –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù!');
            outputChannel.appendLine(`ROO_HOOK_URL = ${process.env.ROO_HOOK_URL || '—É–¥–∞–ª–µ–Ω–∞'}`);
            vscode.window.showInformationMessage('üõë Hook –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. Roo Code —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.');
        }
    };
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ö—É–∫–∞
    let startCommand = vscode.commands.registerCommand('roo-hook-transit.start', () => {
        outputChannel.appendLine('\n‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞: Start Hook');
        activateHook();
    });
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ö—É–∫–∞
    let stopCommand = vscode.commands.registerCommand('roo-hook-transit.stop', () => {
        outputChannel.appendLine('\n‚èπÔ∏è –ö–æ–º–∞–Ω–¥–∞: Stop Hook');
        deactivateHook();
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if (server) {
            server.close();
            server = null;
            outputChannel.appendLine('üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    });
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    let statusCommand = vscode.commands.registerCommand('roo-hook-transit.status', () => {
        outputChannel.appendLine('\nüìä –°–¢–ê–¢–£–°:');
        outputChannel.appendLine(`- Hook –∞–∫—Ç–∏–≤–µ–Ω: ${hookEnabled ? '–î–ê ‚úÖ' : '–ù–ï–¢ ‚ùå'}`);
        outputChannel.appendLine(`- –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: ${server ? '–î–ê ‚úÖ' : '–ù–ï–¢ ‚ùå'}`);
        outputChannel.appendLine(`- ROO_HOOK_URL: ${process.env.ROO_HOOK_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
        const status = hookEnabled ? '‚úÖ Hook –∞–∫—Ç–∏–≤–µ–Ω' : '‚ùå Hook –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω';
        vscode.window.showInformationMessage(`–°—Ç–∞—Ç—É—Å: ${status}`);
    });
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
    let clearCommand = vscode.commands.registerCommand('roo-hook-transit.clear', () => {
        outputChannel.clear();
        outputChannel.appendLine('üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
    });
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const autoStart = context.globalState.get('autoStartHook', false);
    if (autoStart) {
        outputChannel.appendLine('\nü§ñ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ö—É–∫–∞...');
        activateHook();
    }
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏ - —Ç–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ—Ç –∫—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤
    let resetSessionCommand = vscode.commands.registerCommand('roo-hook-transit.resetSession', () => {
        capturedRequests.clear();
        outputChannel.appendLine('\nüîÑ –ö–≠–® –ó–ê–ü–†–û–°–û–í –û–ß–ò–©–ï–ù');
        vscode.window.showInformationMessage('üîÑ –ö—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω');
    });
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    let toggleAutoStartCommand = vscode.commands.registerCommand('roo-hook-transit.toggleAutoStart', async () => {
        const current = context.globalState.get('autoStartHook', false);
        await context.globalState.update('autoStartHook', !current);
        vscode.window.showInformationMessage(`–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ${!current ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
    });
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    context.subscriptions.push(startCommand, stopCommand, statusCommand, clearCommand, resetSessionCommand, toggleAutoStartCommand);
}
exports.activate = activate;
function deactivate() {
    if (server) {
        server.close();
        server = null;
    }
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (originalEnvValue) {
        process.env.ROO_HOOK_URL = originalEnvValue;
    }
    else {
        delete process.env.ROO_HOOK_URL;
    }
    console.log('Roo Hook Transit Extension deactivated');
}
exports.deactivate = deactivate;
//# sourceMappingURL=extension.js.map